import streamlit as st
import pandas as pd
from docx import Document  # N√©cessite l'installation de python-docx
import os
import tempfile
from zipfile import ZipFile
import re
import random
import requests
import shutil

# Configuration de la page
st.set_page_config(page_title="G√©n√©rateur de Questionnaires", layout="wide")
st.title("G√©n√©rateur de Questionnaires de Satisfaction √† Chaud")

# Colonnes requises dans le fichier Excel
REQUIRED_COLS = ['nom', 'pr√©nom', 'email', 'session', 'formation']

def remplacer_placeholders(paragraph, replacements):
    """Remplace les placeholders dans un paragraphe Word"""
    if not paragraph.text:
        return
    original_text = paragraph.text
    for key, value in replacements.items():
        if key in original_text:
            for run in paragraph.runs:
                if key in run.text:
                    run.text = run.text.replace(key, value)

def generer_commentaire_ia(openrouter_api_key, formation="la formation"):
    """G√©n√®re un commentaire IA via OpenRouter"""
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {openrouter_api_key}",
        "HTTP-Referer": "https://formation-entreprise.com ",
        "X-Title": "G√©n√©rateur Questionnaires",
        "Content-Type": "application/json"
    }
    
    prompt = (
        f""" ne commence pas ta phrase toujours avec la m√™me accroche et surtout soit al√©atoire des fois tu peux r√©pondre par quelques mots et soit le plus humain possible tu es un apprenant qui vient de r√©aliser une formation en {formation} g√©n√®re une phrase courte pour d√©crire ton ressenti concernant les points forts de cette formation voici 
        quelques exemples inspire toi dessus  : 
        1-explications claires et outils
        2-Formation pratico pratique. On en ressort avec un syst√®me en place qui fonctionne
        3-Une formation vraiment au top, je suis ressorti avec pleins de tips
        4-Le contenu, les supports
        5-Le formateur est tr√®s p√©dagogue et ma√Ætrise parfaitement le sujet. Le fait d'√™tre en petit comit√© est tr√®s appr√©ciable.
        6-Ouvert √† tous et simple d ºutilisation. R√©sultats concrets7-La recherche Bol√©enne8-Les cours qui sont sous format num√©rique et interactif que l'on peut consulter √† la demande.
        9-formateur p√©dagogue prends son temps10-gestion de dossier admin tout est ok en plus de la formationr√©ponse en quelques mots"""
    )
    
    data = {
        "model": "openai/gpt-4.1",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.5,
        "max_tokens": 50
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content'].strip()
    except Exception as e:
        st.error(f"Erreur API : {str(e)}")
        return ""

def generer_questionnaire(participant, template_path, commentaire_ia=None):
    doc = Document(template_path)

    replacements = {
        "{{nom}}": str(participant['nom']),
        "{{prenom}}": str(participant['pr√©nom']),
        "{{email}}": str(participant['email']),
        "{{ref_session}}": str(participant['session']),
        "{{formation}}": str(participant['formation']),
        "{{formateur}}": "Jean Dupont",
        "{{commentaire_points_forts}}": commentaire_ia or "",
    }

    current_section = None
    formation_choice = str(participant['formation']).strip().lower()
    answer = None

    for para in doc.paragraphs:
        remplacer_placeholders(para, replacements)

        text = para.text.lower()
        
        # D√©tection des sections
        if 'formation suivie' in text:
            current_section = 'formation'
            continue
        elif any(keyword in text for keyword in [
            '√©valuation de la formation', 
            'qualit√© du contenu',
            'pertinence du contenu',
            'clart√© et organisation',
            'qualit√© des supports',
            'utilit√© des supports',
            'comp√©tence et professionnalisme',
            'clart√© des explications',
            'capacit√© √† r√©pondre',
            'interactivit√© et dynamisme',
            'globalement'
        ]):
            current_section = 'satisfaction'
            answer = random.choice(['Tr√®s satisfait', 'Satisfait'])
            continue
        elif 'handicap' in text:
            current_section = 'handicap'
            answer = 'Non concern√©'
            continue

        # Traitement des checkboxes
        if '{{checkbox}}' in para.text:
            option_text = para.text.replace('{{checkbox}}', '').strip()
            clean_option = option_text.split(']')[-1].strip().lower()

            if current_section == 'formation':
                is_selected = formation_choice == clean_option
                symbol = '‚òë' if is_selected else '‚òê'
            elif current_section == 'satisfaction':
                is_selected = answer.lower() == clean_option
                symbol = '‚òë' if is_selected else '‚òê'
            elif current_section == 'handicap':
                is_selected = 'non concern√©' in clean_option
                symbol = '‚òë' if is_selected else '‚òê'
            else:
                symbol = '‚òê'

            original_text = option_text.split('[')[-1].split(']')[0].strip()
            para.text = f'{symbol} {original_text}'

    # Nom du fichier
    safe_prenom = re.sub(r'[^a-zA-Z0-9]', '_', str(participant['pr√©nom']))
    safe_nom = re.sub(r'[^a-zA-Z0-9]', '_', str(participant['nom']))
    filename = f"Questionnaire_{safe_prenom}_{safe_nom}_{participant['session']}.docx"
    
    output_path = os.path.join(tempfile.gettempdir(), filename)
    doc.save(output_path)
    
    return output_path

# Interface utilisateur
st.markdown("### √âtape 1: Importation des fichiers")
col1, col2 = st.columns(2)

with col1:
    excel_file = st.file_uploader("Fichier Excel des participants", type="xlsx")
with col2:
    template_file = st.file_uploader("Mod√®le Word", type="docx")

st.markdown("### √âtape 2: Configuration IA")
generer_ia = st.checkbox("Activer la g√©n√©ration de commentaires IA (n√©cessite cl√© API)")
openrouter_api_key = ""
if generer_ia:
    openrouter_api_key = st.text_input("Cl√© API OpenRouter", type="password")

if excel_file and template_file:
    try:
        df = pd.read_excel(excel_file)

        if not all(col in df.columns for col in REQUIRED_COLS):
            st.error(f"‚ùå Colonnes requises manquantes : {', '.join(REQUIRED_COLS)}")
            st.stop()

        st.success(f"‚úÖ {len(df)} participants d√©tect√©s")

        if st.button("G√©n√©rer les questionnaires", type="primary"):
            with tempfile.TemporaryDirectory() as tmpdir:
                template_path = os.path.join(tmpdir, "template.docx")
                with open(template_path, "wb") as f:
                    template_file.seek(0)
                    f.write(template_file.read())

                zip_path = os.path.join(tmpdir, "Questionnaires.zip")

                with ZipFile(zip_path, 'w') as zipf:
                    progress_bar = st.progress(0)
                    
                    for idx, row in df.iterrows():
                        commentaire = None
                        if generer_ia and openrouter_api_key:
                            try:
                                commentaire = generer_commentaire_ia(openrouter_api_key, row['formation'])
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è Erreur IA pour {row['pr√©nom']} : {str(e)}")
                        
                        try:
                            output_path = generer_questionnaire(row, template_path, commentaire)
                            zipf.write(output_path, os.path.basename(output_path))
                            progress_bar.progress((idx + 1)/len(df), text=f"Progress: {idx+1}/{len(df)}")
                        except Exception as e:
                            st.error(f"‚ùå √âchec g√©n√©ration {row['pr√©nom']} : {str(e)}")
                            continue

                with open(zip_path, "rb") as f:
                    st.balloons()
                    st.download_button(
                        "‚¨áÔ∏è T√©l√©charger les questionnaires",
                        data=f,
                        file_name="Questionnaires_Satisfaction.zip",
                        mime="application/zip"
                    )

    except Exception as e:
        st.error(f"üö® Erreur critique : {str(e)}")
