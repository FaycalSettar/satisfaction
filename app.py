import streamlit as st
import pandas as pd
from docx import Document
import os
import tempfile
from zipfile import ZipFile
import re
import random
import requests
import shutil

st.set_page_config(page_title="G√©n√©rateur de Questionnaires", layout="wide")
st.title("G√©n√©rateur de Questionnaires de Satisfaction √† Chaud")

REQUIRED_COLS = ['nom', 'pr√©nom', 'email', 'session', 'formation', 'formateur']

def remplacer_placeholders(paragraph, replacements):
    """Version corrig√©e avec gestion des styles de caract√®res"""
    if not paragraph.text:
        return
    
    # 1. Fusionner tous les runs du paragraphe en conservant les styles
    full_text = ''.join(run.text for run in paragraph.runs)
    
    # 2. Effectuer tous les remplacements sur le texte complet
    for key, value in replacements.items():
        if key in full_text:
            full_text = full_text.replace(key, value)
    
    # 3. Sauvegarder les propri√©t√©s de style du premier run
    if paragraph.runs:
        first_run = paragraph.runs[0]
        font = first_run.font
        saved_style = {
            'bold': font.bold,
            'italic': font.italic,
            'underline': font.underline,
            'size': font.size,
            'color': font.color.rgb if font.color else None,
            'name': font.name
        }
    else:
        saved_style = None
    
    # 4. Effacer le paragraphe et recr√©er le texte
    paragraph.clear()
    new_run = paragraph.add_run(full_text)
    
    # 5. Restaurer les propri√©t√©s de style
    if saved_style:
        new_run.font.bold = saved_style['bold']
        new_run.font.italic = saved_style['italic']
        new_run.font.underline = saved_style['underline']
        if saved_style['size']:
            new_run.font.size = saved_style['size']
        if saved_style['color']:
            new_run.font.color.rgb = saved_style['color']
        if saved_style['name']:
            new_run.font.name = saved_style['name']

def generer_commentaire_ia(openrouter_api_key, formation="la formation"):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {openrouter_api_key}",
        "HTTP-Referer": "https://formation-entreprise.com",
        "X-Title": "G√©n√©rateur Questionnaires",
        "Content-Type": "application/json"
    }

    prompt_points_forts = (
        f"""Tu viens de suivre une formation en {formation}. R√©dige une seule phrase courte et naturelle pour d√©crire ton ressenti. N'utilise aucune liste, num√©ro, puce, tiret, ou mise en forme Markdown (comme **gras** ou *italique*). Ne commence pas par \"1.\", \"2.\", \"-\", ou autre symbole. Ne donne qu‚Äôune phrase, sans retour √† la ligne et √©vite de commencer ta phrase par Je mais soit le plus al√©atoire possible base toi sur les exemples que je t'ai donn√© ci dessous.

Inspire-toi librement des id√©es suivantes (mais sans les reprendre telles quelles) :
Explications claires et outils
Formation pratico-pratique
Plein de tips concrets
Le formateur est p√©dagogue
Cours interactifs accessibles √† tout moment
Supports bien structur√©s
On repart avec un syst√®me cl√© en main
R√©sultats concrets d√®s la fin de la session

Ta r√©ponse doit √™tre 100 % humaine, spontan√©e et fluide. Une seule phrase. Pas de formatage. Pas de liste. Juste un ressenti authentique."""
    )

    prompt_remarques = (
        f"""Tu viens de terminer une formation en {formation}. R√©dige une phrase spontan√©e, comme si tu laissais un commentaire libre √† chaud sur ton ressenti g√©n√©ral ou un point que tu voudrais partager, √©vite de commencer ta phrase par "Je" ou "J'ai" mais soit le plus al√©atoire possible dans le d√©but de la phrase.

Ta r√©ponse peut contenir une appr√©ciation g√©n√©rale, une suggestion, un ressenti, une √©motion ou une remarque libre. Tu peux √™tre personnel, tant que tu restes positif ou constructif.

‚ö†Ô∏è Important :
- Ne commence pas par un num√©ro, un tiret ou une liste
- Ne fais pas de mise en forme (pas de gras, italique, etc.)
- Ne retourne qu'une seule phrase courte, humaine, naturelle
- Ne commence pas tes phrases par un vrai coup de boost ou un vrai plaisir soit al√©atoire dans tes propositions
Ta r√©ponse doit √™tre 100 % humaine, spontan√©e et fluide. Une seule phrase. Pas de formatage. Pas de liste. Juste un ressenti authentique."""
    )

    def appeler_api(prompt):
        data = {
            "model": "openai/gpt-4.1",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.5,
            "max_tokens": 100
        }
        response = requests.post(url, headers=headers, json=data, timeout=10)
        response.raise_for_status()
        raw = response.json()['choices'][0]['message']['content'].strip()
        options = [ligne.strip() for ligne in raw.splitlines() if ligne.strip()]
        return random.choice(options) if options else ""

    try:
        commentaire_points_forts = appeler_api(prompt_points_forts)
        commentaire_remarques = appeler_api(prompt_remarques)
        return commentaire_points_forts, commentaire_remarques
    except Exception as e:
        st.error(f"Erreur API IA : {e}")
        return "", ""

def generer_questionnaire(participant, template_path, commentaire_ia=None, commentaire_remarques=None):
    doc = Document(template_path)

    replacements = {
        "{{nom}}": str(participant['nom']),
        "{{prenom}}": str(participant['pr√©nom']),
        "{{email}}": str(participant['email']),
        "{{ref_session}}": str(participant['session']),
        "{{formation}}": str(participant['formation']),
        "{{formateur}}": str(participant['formateur']),
        "{{commentaire_points_forts}}": commentaire_ia or "",
        "{{commentaire_remarques}}": commentaire_remarques or "",
    }

    current_section = None
    formation_choice = str(participant['formation']).strip().lower()
    answer = None

    # Remplacer les placeholders dans tous les paragraphes
    for para in doc.paragraphs:
        remplacer_placeholders(para, replacements)

        text = para.text.lower()
        
        # D√©tection des sections
        if 'formation suivie' in text:
            current_section = 'formation'
            continue
        elif any(keyword in text for keyword in [
            '√©valuation de la formation',
            'qualit√© du service',
            'qualit√© du contenu',
            'pertinence du contenu',
            'clart√© et organisation',
            'qualit√© des supports',
            'utilit√© des supports',
            'comp√©tence et professionnalisme',
            'clart√© des explications',
            'capacit√© √† r√©pondre',
            'interactivit√© et dynamisme',
            'globalement'
        ]):
            current_section = 'satisfaction'
            answer = random.choice(['Tr√®s satisfait', 'Satisfait'])
            continue
        elif 'handicap' in text:
            current_section = 'handicap'
            answer = 'Non concern√©'
            continue

        # Traitement des checkboxes
        if '{{checkbox}}' in para.text:
            # Sauvegarder le style d'origine
            original_style = para.style
            
            option_text = para.text.replace('{{checkbox}}', '').strip()
            clean_option = option_text.split(']')[-1].strip().lower()

            if current_section == 'formation':
                symbol = '‚òë' if formation_choice == clean_option else '‚òê'
            elif current_section == 'satisfaction':
                symbol = '‚òë' if answer.lower() == clean_option else '‚òê'
            elif current_section == 'handicap':
                symbol = '‚òë' if 'non concern√©' in clean_option else '‚òê'
            else:
                symbol = '‚òê'

            original_text = option_text.split('[')[-1].split(']')[0].strip()
            
            # R√©initialiser le paragraphe avec le nouveau contenu
            para.clear()
            para.add_run(f'{symbol} {original_text}')
            para.style = original_style

    safe_prenom = re.sub(r'[^a-zA-Z0-9]', '_', str(participant['pr√©nom']))
    safe_nom = re.sub(r'[^a-zA-Z0-9]', '_', str(participant['nom']))
    filename = f"Questionnaire_satisfaction_{safe_prenom}_{safe_nom}_{participant['session']}.docx"
    
    output_path = os.path.join(tempfile.gettempdir(), filename)
    doc.save(output_path)
    
    return output_path

# Interface utilisateur
st.markdown("### √âtape 1: Importation des fichiers")
col1, col2 = st.columns(2)

with col1:
    excel_file = st.file_uploader("Fichier Excel des participants", type="xlsx")
with col2:
    template_file = st.file_uploader("Mod√®le Word", type="docx")

st.markdown("### √âtape 2: Configuration IA")
generer_ia = st.checkbox("Activer la g√©n√©ration de commentaires IA (n√©cessite cl√© API)")
openrouter_api_key = ""
frequence_ia = 1

if generer_ia:
    openrouter_api_key = st.text_input("Cl√© API OpenRouter", type="password")
    frequence_ia = st.slider("Fr√©quence de g√©n√©ration IA (1 sur x participants)", min_value=1, max_value=10, value=4, step=1)

if excel_file and template_file:
    try:
        df = pd.read_excel(excel_file)
        if not all(col in df.columns for col in REQUIRED_COLS):
            st.error(f"‚ùå Colonnes requises manquantes : {', '.join(REQUIRED_COLS)}")
            st.stop()

        st.success(f"‚úÖ {len(df)} participants d√©tect√©s")

        # ‚ûï Pr√©visualisation IA al√©atoire
        if generer_ia and openrouter_api_key:
            st.markdown("### üé≤ Pr√©visualiser un commentaire IA al√©atoire")

            if st.button("üß† G√©n√©rer une pr√©visualisation pour un participant s√©lectionn√© al√©atoirement"):
                candidats = df.iloc[::frequence_ia]
                if not candidats.empty:
                    participant_test = candidats.sample(1).iloc[0]
                    cmt_fort, cmt_libre = generer_commentaire_ia(openrouter_api_key, participant_test['formation'])

                    st.markdown(f"**üë§ Participant : {participant_test['pr√©nom']} {participant_test['nom']} ‚Äì Formation : {participant_test['formation']}**")
                    st.markdown("**üü¢ Commentaire : Points forts**")
                    st.info(cmt_fort)
                    st.markdown("**üí¨ Commentaire : Remarque libre**")
                    st.info(cmt_libre)
                else:
                    st.warning("Aucun participant √©ligible avec la fr√©quence d√©finie.")

        if st.button("G√©n√©rer les questionnaires", type="primary"):
            with tempfile.TemporaryDirectory() as tmpdir:
                template_path = os.path.join(tmpdir, "template.docx")
                with open(template_path, "wb") as f:
                    template_file.seek(0)
                    f.write(template_file.read())

                zip_path = os.path.join(tmpdir, "Questionnaires.zip")

                with ZipFile(zip_path, 'w') as zipf:
                    progress_bar = st.progress(0)
                    for idx, row in df.iterrows():
                        commentaire_points_forts, commentaire_remarques = "", ""
                        if generer_ia and openrouter_api_key and idx % frequence_ia == 0:
                            commentaire_points_forts, commentaire_remarques = generer_commentaire_ia(openrouter_api_key, row['formation'])
                        try:
                            output_path = generer_questionnaire(row, template_path, commentaire_points_forts, commentaire_remarques)
                            zipf.write(output_path, os.path.basename(output_path))
                            progress_bar.progress((idx + 1)/len(df), text=f"Progress: {idx+1}/{len(df)}")
                        except Exception as e:
                            st.error(f"‚ùå √âchec g√©n√©ration {row['pr√©nom']} : {str(e)}")
                            continue

                with open(zip_path, "rb") as f:
                    st.balloons()
                    st.download_button(
                        "‚¨áÔ∏è T√©l√©charger les questionnaires",
                        data=f,
                        file_name="Questionnaires_Satisfaction.zip",
                        mime="application/zip"
                    )
    except Exception as e:
        st.error(f"üö® Erreur critique : {str(e)}")
